---
title: "BEE 4750/5750 Homework 0"
author: "Anne Potter (ap674)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
Pkg.add("Distributions")
```

# Problem 1

## Problem 1.1
```julia
function square_number(x)
    output = x^2
    return output
end
```
## Problem 1.2
We can see that $5^2 =$ `j square_number(5)`.

## Problem 1.3
```julia
using Plots
data = zeros(21, 2);
for i in 1:21
  data[i, 1] = i-11
  data[i, 2] = square_number(data[i, 1])
end
plot(data[:, 1], data[:, 2], label="square_number function", legend=:topright)
```

# Problem 2

## Problem 2.1
If $x = a^2$, then $x/a = a$.
If $a$ is too high, then the average of $x/a$ and $a$ will lower $a$.
If $a$ is too low, then the average of $x/a$ and $a$ will increase $a$.

## Problem 2.2
```julia
function newtonian_root(x, a)
  if (a == 0 && x != 0)
    return newtonian_root(x, 1)
  end
  if (x/a - a) < 0.001
    return a
  end
  a = (x/a + a) / 2
  return newtonian_root(x, a)
end 
```
The square root of 2 is `j newtonian_root(2, 1)`.


# Problem 3

## Problem 3.1
```julia
x = rand(20, 1)
```

## Problem 3.2
```julia
function mean(vector)
  sum = 0
  i = 1
  for i in 1:length(vector)
    sum += vector[i]
  end
  mean = sum / length(vector)
  return mean
end

function demean(vector)
  avg = mean(vector)
  new = zeros(length(vector), 1)
  for j in 1:length(vector)
    new[j] = vector[j] - avg
  end
  return new
end
```
## Problem 3.3
```julia
vect = ones(10);
for i in 1:10
  if (i==1 || i==2 || i==9 || i==10)
    vect[i] = 0
  end
end
```

## Problem 3.4
```julia
m = rand(5, 5)
for p in 1:5
  m[1:5,p] = demean(m[1:5, p])
end
m
```

# Problem 4

## Problem 4.1
```julia
mu = log(0.03)
sigma = 0.005
using Distributions
log_dist = LogNormal(mu, sigma)
y_t = rand(log_dist, 100)
```

## Problem 4.2
```julia
function phos_dynam(a, y_t, b, q, T, x_0)
  x_t[1] = x_0
  t = zeros(T)
  for i in 1:T-1
    t[i] = i
    x_t[i+1] = x_t[i] + a + y_t[i] + (x_t[i]^q / (1+x_t[i]^q)) - b*x_t[i]
  end
  return x_t
end
```

## Problem 4.3
```julia
# given values
a = 0.4;
q = 2;
b = 0.42;
T = 100; # years
x_0 = 0;

x_t = zeros(100);
x_t = phos_dynam(a, y_t, b, q, T, x_0);
t = range(1, T, length = T);
using Plots
plot(x_t, t, label="Lake Phosphorus Levels", legend=:topright)
```

# References