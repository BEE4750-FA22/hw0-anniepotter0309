---
title: "BEE 4750/5750 Homework 0"
author: "Anne Potter (ap674)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
function square_number(x)
    output = x^2
    return output
end
```
## Problem 1.2
```julia
"We can see that $x^2 =$ `j square_number(x)`."
```
## Problem 1.3
```julia
using Plots
data = zeros(21, 2)
for i in -10:10
  data[i, 1] = i
  data[i, 2] = square_number(x[i])
end
plot(data, label="square_number function", legend=:topright)
```

# Problem 2

## Problem 2.1
```julia
"if x = a^2, then x/a = a"
"if a is too high, then the average of x/a and a will lower a"
"if a is too low, then the average of x/a and a will increase a"
```

## Problem 2.2
```julia
function newtonian_root(x, a)
  if (x/a - a) < 0.001
    return a
  end
  a = (x/a + a) / 2
  return newtonian_root(x, a)
end 
```

# Problem 3

## Problem 3.1
```julia
x = rand(20, 1)
```
# hi there

## Problem 3.2
```julia
function mean(vector)
  sum = 0
  for i in 1:length(vector)
    sum += vector[i]
  end
  mean = sum / i
  return mean
end

function demean(vector)
  mean = mean(vector)
  new = zeros(length(vector), 1)
  for i in 1:length(vector)
    new[i] = vector[i] - mean
  end
  return new
end
```
## Problem 3.3
```julia
vect = ones(10, 1)
for i in 1:10
  if (i==1 || i==2 || i==9 || i==10)
    rand[i] = 0
  end
end
```

## Problem 3.4
```julia
m = zeros(5, 5)
for i in 1:5
  mean = mean(m[i,:])
  for j in 1:5
    m[i, j] -= mean
  end
end
```

# Problem 4

## Problem 4.1
```julia
# given values
a = 0.4
q = 2
b = 0.42
mu = log(0.03)
sigma = 0.005
T = 100 # years

# load Julia package
import Pkg
Pkg.activate(".")
Pkg.instantiate()
using Distributions

log_dist = LogNormal(mu, sigma)
y_t = rand(log_dist, 100)
```

## Problem 4.2
```julia
function phos_dynam(a, y_t, b, q, T, x_0)
  x_t[1] = x_0
  t = zeros(T)
  data = zeros(2, T)
  for i in 1:T
    t[i] = i
    x_t[i+1] = x_t[i] + a + y_t[i] + (x_t[i]^q / (1+x_t[i]^q)) - b*x_t[i]
    data[i] = [t[i]; x_t[i]]
  return x_t
end
```

## Problem 4.3
```julia
using Plots
plot(data, label="Lake Phosphorus Levels", legend=:topright)
```

# References